import { AuthService } from './../auth/services/auth.service';
import { CommonModule, NgOptimizedImage } from '@angular/common';
import {
  Component,
  OnInit,
  ViewEncapsulation,
  OnDestroy,
  signal,
} from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { StorageWrapperService } from '../../shared/services/storage-wrapper.service';

import { Events } from '../../shared/models/event.model';
import {
  EventsListParams,
  EventsListResponse,
} from '../../shared/models/events-list.model';
import { Subject, interval, takeUntil, filter } from 'rxjs';

// PrimeNG Imports
import { CarouselModule } from 'primeng/carousel';
import { ButtonModule } from 'primeng/button';
import { TagModule } from 'primeng/tag';
import { SkeletonModule } from 'primeng/skeleton';
import { CreateEventService } from '../organizer/services/events.service';
import { EventService } from '../events/services/event-list.service';
import { ScrollTopModule, ScrollTop } from 'primeng/scrolltop';

// Interface ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t, lo·∫°i b·ªè thu·ªôc t√≠nh 'icon'
interface Feature {
  title: string;
  description: string;
}

// Th√™m interface cho category ƒë·ªÉ code ch·∫∑t ch·∫Ω h∆°n
interface Category {
  name: string;
  icon: string;
  gradient: string;
}

@Component({
  selector: 'app-home',
  imports: [
    CommonModule,
    FormsModule,
    RouterModule,
    CarouselModule,
    ButtonModule,
    TagModule,
    SkeletonModule,
    ScrollTop,
  ],
  templateUrl: './home.component.html',
  styleUrl: './home.component.css',
})
export class HomeComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();

  constructor(
    private authService: AuthService,
    private eventService: EventService,
    private createEventService: CreateEventService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadFeaturedEvents();
    this.loadLargeCapacityEvents();
    this.loadEventCategories();
    this.startBannerRotation();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  searchQuery = '';
  isLoading = signal(false);
  isBannerLoading = signal(false);

  featuredEvents: Events[] = [];
  largeCapacityEvents: Events[] = [];
  bannerEvents = signal<Events[]>([]);
  currentBannerIndex = 0;

  categories = signal<Category[]>([]);
  carouselNumVisible = signal<number>(3);

  carouselResponsiveOptions = [
    { breakpoint: '1199px', numVisible: 3, numScroll: 1 },
    { breakpoint: '991px', numVisible: 2, numScroll: 1 },
    { breakpoint: '767px', numVisible: 1, numScroll: 1 },
  ];

  // M·∫£ng features ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t, kh√¥ng c√≤n ch·ª©a m√£ SVG
  features: Feature[] = [
    {
      title: 'Thanh to√°n an to√†n',
      description:
        'H·ªá th·ªëng thanh to√°n ƒë∆∞·ª£c m√£ h√≥a v·ªõi SSL, h·ªó tr·ª£ ƒëa d·∫°ng ph∆∞∆°ng th·ª©c thanh to√°n online.',
    },
    {
      title: 'Check-in QR Code',
      description:
        'V√© ƒëi·ªán t·ª≠ v·ªõi m√£ QR, check-in nhanh ch√≥ng v√† ch·ªëng gi·∫£ m·∫°o hi·ªáu qu·∫£.',
    },
    {
      title: 'Real-time Updates',
      description:
        'C·∫≠p nh·∫≠t th√¥ng tin s·ª± ki·ªán, s·ªë l∆∞·ª£ng v√© c√≤n l·∫°i v√† th√¥ng b√°o quan tr·ªçng theo th·ªùi gian th·ª±c.',
    },
    {
      title: 'T√¨m ki·∫øm th√¥ng minh',
      description:
        'C√¥ng c·ª• t√¨m ki·∫øm AI gi√∫p g·ª£i √Ω s·ª± ki·ªán ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† v·ªã tr√≠ c·ªßa b·∫°n.',
    },
    {
      title: 'Qu·∫£n l√Ω d·ªÖ d√†ng',
      description:
        'Dashboard tr·ª±c quan cho ban t·ªï ch·ª©c, theo d√µi doanh thu v√† qu·∫£n l√Ω ng∆∞·ªùi tham gia.',
    },
    {
      title: 'H·ªó tr·ª£ 24/7',
      description:
        'ƒê·ªôi ng≈© h·ªó tr·ª£ kh√°ch h√†ng chuy√™n nghi·ªáp, s·∫µn s√†ng gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc c·ªßa b·∫°n.',
    },
  ];

  loadFeaturedEvents(): void {
    this.isLoading.set(true);
    const params: EventsListParams = {
      page: 0,
      size: 3,
      sortBy: 'startDate',
      sortDirection: 'ASC'
    };
    this.eventService
      .getEvents(params)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response: EventsListResponse) => {
          this.featuredEvents = response.events || [];
          this.isLoading.set(false);
        },
        error: (error) => {
          console.error('Error loading featured events:', error);
          this.isLoading.set(false);
        },
      });
  }

  updateCarouselVisibility(): void {
    const eventCount = this.largeCapacityEvents.length;
    // N·∫øu c√≥ s·ª± ki·ªán, l·∫•y s·ªë nh·ªè h∆°n gi·ªØa s·ªë s·ª± ki·ªán v√† 3.
    // N·∫øu kh√¥ng c√≥ s·ª± ki·ªán n√†o, ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† 3 ƒë·ªÉ tr√°nh l·ªói.
    this.carouselNumVisible.set(eventCount > 0 ? Math.min(eventCount, 3) : 3);
    console.log('visble: ', this.carouselNumVisible(), eventCount);
  }

  loadLargeCapacityEvents(): void {
    const params: EventsListParams = {
      page: 0,
      size: 6,
    };
    this.eventService
      .getEvents(params)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response: EventsListResponse) => {
          this.largeCapacityEvents = response.events || [];
          this.updateCarouselVisibility();
        },
        error: (error) => {
          console.error('Error loading large capacity events:', error);
          this.updateCarouselVisibility();
        },
      });
  }

  loadEventCategories(): void {
    this.createEventService
      .getEventCategories()
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (categories: string[]) => {
          const mappedCategories = categories.map((category, index) => ({
            name: category,
            icon: this.getCategoryIcon(category),
            gradient: this.getCategoryGradient(index),
          }));
          this.categories.set(mappedCategories);
        },
        error: (error) => {
          console.error('Error loading categories:', error);
        },
      });
  }

  loadBannerEvents(): void {
    this.isBannerLoading.set(true);
    const params: EventsListParams = {
      page: 0,
      size: 5,
      sortBy: 'startDate',
      sortDirection: 'ASC',
    };
    this.eventService
      .getEvents(params)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response: EventsListResponse) => {
          const banner =
            response.events?.filter((event) => event.eventBanner) || [];
          this.isBannerLoading.set(false);
          this.bannerEvents.set(banner);
        },
        error: (error) => {
          console.error('Error loading banner events:', error);
          this.isBannerLoading.set(false);
        },
      });
  }

  startBannerRotation(): void {
    this.loadBannerEvents();
    interval(4000)
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        if (this.bannerEvents().length > 0) {
          this.currentBannerIndex =
            (this.currentBannerIndex + 1) % this.bannerEvents().length;
        }
      });
  }

  onSearch(): void {
    if (this.searchQuery.trim()) {
      const queryParams = {
        search: this.searchQuery,
      };
      this.router.navigate(['/events'], { queryParams });
    }
  }

  onEnterSearch(event: KeyboardEvent): void {
    if (event.key === 'Enter') {
      this.onSearch();
    }
  }

  onBookEvent(event: Events): void {
    console.log('Booking event:', event.id);
    // alert(`ƒê·∫∑t v√© cho s·ª± ki·ªán: ${event.eventName}`);
    this.router.navigate(['/event-detail/', event.id]);
  }

  onViewAllEvents(): void {
    this.router.navigate(['/events']);
  }

  onCategoryClick(categoryName: string): void {
    const queryParams = {
      category: categoryName,
    };
    this.router.navigate(['/events'], { queryParams });
  }

  onBannerClick(event: Events): void {
    // console.log('Banner event clicked:', event.id);
    // alert(`Xem chi ti·∫øt s·ª± ki·ªán: ${event.eventName}`);
    this.router.navigate(['/event-detail/', event.id]);
  }

  nextBanner(): void {
    if (this.bannerEvents().length > 1) {
      this.currentBannerIndex =
        (this.currentBannerIndex + 1) % this.bannerEvents().length;
        console.log("banner size: ", this.currentBannerIndex, this.bannerEvents().length);
    }
  }

  prevBanner(): void {
    if (this.bannerEvents().length > 0) {
      this.currentBannerIndex =
        this.currentBannerIndex === 0
          ? this.bannerEvents().length - 1
          : this.currentBannerIndex - 1;
    }
  }

  setBannerIndex(index: number): void {
    this.currentBannerIndex = index;
  }

  formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  }

  minPriceZone(event: Events): string {
    const minPrice = Math.min(
      ...event.zones.filter((zone) => zone.isSellable).map((zone) => zone.price)
    );
    if (minPrice == 0) return 'Mi·ªÖn Ph√≠';
    return this.formatPrice(minPrice);
  }

  formatPrice(price: number): string {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(price);
  }

  getImageUrl(imagePath: string): string {
    if (!imagePath) return '';
    return this.createEventService.urlImg(imagePath);
  }

  getTotalSeats(event: Events): number {
    return (
      event.zones?.reduce((total, zone) => total + (zone.maxTickets || 0), 0) ||
      0
    );
  }

  // ƒê√£ th√™m icon cho "H·ªôi th·∫£o"
  public getCategoryIcon(category: string): string {
    const iconMap: { [key: string]: string } = {
      '√Çm nh·∫°c': 'üéµ',
      'H·ªôi th·∫£o': 'üé§',
      'C√¥ng ngh·ªá': 'üíª',
      'Th·ªÉ thao': '‚öΩ',
      'Kinh doanh': 'üíº',
      'Gi√°o d·ª•c': 'üìö',
      '·∫®m th·ª±c': 'üçú',
      'Ngh·ªá thu·∫≠t': 'üé®',
      'Du l·ªãch': '‚úàÔ∏è',
      'S·ª©c kh·ªèe': 'üè•',
      Kh√°c: 'üìÖ',
    };
    return iconMap[category] || 'üìÖ';
  }

  private getCategoryGradient(index: number): string {
    const gradients = [
      'from-pink-500 to-red-500',
      'from-blue-500 to-cyan-500',
      'from-green-500 to-teal-500',
      'from-purple-500 to-indigo-500',
      'from-yellow-500 to-orange-500',
      'from-red-500 to-pink-500',
    ];
    return gradients[index % gradients.length];
  }

  trackByEventId(index: number, event: Events): string {
    return event.id;
  }
}
